# Generated by Django 4.2.4 on 2024-05-02 15:26

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ClosedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.IntegerField(blank=True, verbose_name='Порядковый номер')),
                ('description', models.TextField(verbose_name='Описание')),
                ('lead_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Время выполнения')),
                ('is_several_correct_answers', models.BooleanField(default=False, verbose_name='Допустимо несколько правильных ответов')),
                ('is_random_order_answer_options', models.BooleanField(default=False, verbose_name='Случайный порядок вариантов ответа')),
                ('is_partially_correct_execution', models.BooleanField(default=False, verbose_name='При оценке учесть частично правильное выполнение задания')),
            ],
            options={
                'db_table': 'testing_closed-question',
            },
        ),
        migrations.CreateModel(
            name='OpenQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.IntegerField(blank=True, verbose_name='Порядковый номер')),
                ('description', models.TextField(verbose_name='Описание')),
                ('lead_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Время выполнения')),
            ],
            options={
                'db_table': 'testing_open-question',
            },
        ),
        migrations.CreateModel(
            name='TaskType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование')),
            ],
            options={
                'db_table': 'testing_task-type',
            },
        ),
        migrations.CreateModel(
            name='Testing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Наименование')),
                ('is_published', models.BooleanField(blank=True, default=False, verbose_name='Опубликовано')),
                ('is_review_of_result_by_student', models.BooleanField(blank=True, default=True, verbose_name='Просмотр результата студентом')),
                ('date_of_creation', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('date_of_deletion', models.DateTimeField(blank=True, default=None, null=True, verbose_name='Дата удаления')),
                ('task_lead_time', models.TimeField(blank=True, default=None, null=True, verbose_name='Время выполнения задачи')),
                ('number', models.IntegerField(default=1, verbose_name='Номер работы')),
                ('likelihood_guessing_answers', models.FloatField(default=1, verbose_name='Вероятность угадывания правильных ответов')),
                ('assessment_threshold', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='Пороговое значение оценки')),
                ('is_established_order_tasks', models.BooleanField(default=False, verbose_name='Установленный порядок задач')),
                ('student_groups', models.ManyToManyField(blank=True, related_name='%(app_label)s_%(class)s_set', to='user.studentgroup', verbose_name='Группы студентов')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_set', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Тестирование',
                'verbose_name_plural': 'Тестирования',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SolvingTesting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Наименование')),
                ('assessment', models.IntegerField(null=True, verbose_name='Оценка')),
                ('start_passage', models.DateTimeField(auto_now_add=True, verbose_name='Начало прохождения')),
                ('end_passage', models.DateTimeField(default=None, null=True, verbose_name='Окончание прохождения')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_solving_testing_set', to='user.student', verbose_name='Студент')),
                ('testing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_solving_testing_set', to='testing.testing', verbose_name='Тестирование')),
            ],
            options={
                'db_table': 'testing_solving-testing',
            },
        ),
        migrations.CreateModel(
            name='SolvingOpenQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=100, verbose_name='Ответ')),
                ('start_passage', models.DateTimeField(verbose_name='Начало прохождения')),
                ('lead_time', models.TimeField(verbose_name='Время выполнения')),
                ('open_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solving_open_question_set', to='testing.openquestion', verbose_name='Открытый вопрос')),
                ('solving_testing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solving_open_question_set', to='testing.solvingtesting', verbose_name='Решение тестирования')),
            ],
            options={
                'db_table': 'testing_solving-open-question',
            },
        ),
        migrations.CreateModel(
            name='SolvingClosedQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=100, verbose_name='Ответ')),
                ('start_passage', models.DateTimeField(verbose_name='Начало прохождения')),
                ('lead_time', models.TimeField(verbose_name='Время выполнения')),
                ('closed_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solving_closed_question_set', to='testing.closedquestion', verbose_name='Закрытый вопрос')),
                ('solving_testing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solving_closed_question_set', to='testing.solvingtesting', verbose_name='Решение тестирования')),
            ],
            options={
                'db_table': 'testing_solving-closed-question',
            },
        ),
        migrations.CreateModel(
            name='OpenQuestionAnswerOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_answer', models.CharField(verbose_name='Правильный ответ')),
                ('open_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='open_question_answer_option_set', to='testing.openquestion', verbose_name='Открытый вопрос')),
            ],
            options={
                'db_table': 'testing_open-question-answer-option',
            },
        ),
        migrations.AddField(
            model_name='openquestion',
            name='task_type',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='open_question_set', to='testing.tasktype', verbose_name='Тип задачи'),
        ),
        migrations.AddField(
            model_name='openquestion',
            name='testing',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='open_question_set', to='testing.testing', verbose_name='Тестирование'),
        ),
        migrations.CreateModel(
            name='MaxScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('five', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='Отлично')),
                ('four', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='Хорошо')),
                ('three', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='Удовлетворительно')),
                ('two', models.IntegerField(default=1, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(1)], verbose_name='Неудовлетворительно')),
                ('testing', models.ManyToManyField(related_name='max_score_set', to='testing.testing', verbose_name='Тестирование')),
            ],
            options={
                'db_table': 'testing_max-score',
            },
        ),
        migrations.CreateModel(
            name='ClosedQuestionAnswerOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.IntegerField(blank=True, verbose_name='Порядковый номер')),
                ('description', models.TextField(verbose_name='Описание')),
                ('is_correct', models.BooleanField(verbose_name='Правильный')),
                ('closed_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='closed_question_answer_option_set', to='testing.closedquestion', verbose_name='Закрытый вопрос')),
            ],
            options={
                'db_table': 'testing_closed-question-answer-option',
                'ordering': ['serial_number'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='closedquestion',
            name='task_type',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='closed_question_set', to='testing.tasktype', verbose_name='Тип задачи'),
        ),
        migrations.AddField(
            model_name='closedquestion',
            name='testing',
            field=models.ManyToManyField(related_name='closed_question_set', to='testing.testing', verbose_name='Тестирование'),
        ),
    ]
